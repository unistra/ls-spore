// Generated by LiveScript 1.3.1
(function(){
  describe('Spore', function(x){
    beforeAll(function(done){
      var base_url;
      jasmine.DEFAULT_TIMEOUT_INTERVAL = 10000;
      this.routeGetList = void 8;
      this.routePost = void 8;
      this.routeGetOne = void 8;
      this.routeDeleteOne = void 8;
      return this.client = new Spore('/base/data/description.json', function(){
        return done();
      }, function(){}, base_url = 'http://localhost:3000/api');
    });
    return describe('Test client', function(x){
      it('initialize Spore client', function(){
        return expect(this.client.isReady).toBe(true);
      });
      it('log basic infos', function(){
        this.client.logBasicInfos();
        return expect(true).toBe(true);
      });
      it('check client base attrs', function(){
        expect(this.client.url).toBe('/base/data/description.json');
        expect(this.client.baseUrl).toBe('http://localhost:3000/api');
        return expect(this.client.description.name).toBe('TEST API');
      });
      it('check client methods specs add product', function(){
        expect(this.client.methodsSpecs.add_product != null).toBe(true);
        expect(this.client.methodsSpecs.add_product.path).toBe("/products");
        expect(this.client.methodsSpecs.add_product.required_params.length).toBe(0);
        expect(this.client.methodsSpecs.add_product.optional_params.length).toBe(0);
        expect(this.client.methodsSpecs.add_product.required_payload).toBe(true);
        expect(this.client.methodsSpecs.add_product.method).toBe("POST");
        expect(this.client.methodsSpecs.add_product.authentication).toBe(true);
        expect(this.client.methodsSpecs.add_product.documentation).toBe("Add a product");
        expect(this.client.methodsSpecs.add_product.env.REQUEST_METHOD).toBe("POST");
        expect(this.client.methodsSpecs.add_product.env.SERVER_NAME).toBe("localhost");
        expect(this.client.methodsSpecs.add_product.env.SERVER_PORT).toBe(3000);
        expect(this.client.methodsSpecs.add_product.env.SCRIPT_NAME).toBe("/api");
        expect(this.client.methodsSpecs.add_product.env.PATH_INFO).toBe("/products");
        expect(this.client.methodsSpecs.add_product.env.QUERY_STRING).toBe("");
        expect(this.client.methodsSpecs.add_product.env.spore.expected_status).toBe(void 8);
        expect(this.client.methodsSpecs.add_product.env.spore.authentication).toBe(true);
        expect(Object.keys(this.client.methodsSpecs.add_product.env.spore.params).length).toBe(0);
        expect(Object.keys(this.client.methodsSpecs.add_product.env.spore.payload).length).toBe(0);
        expect(Object.keys(this.client.methodsSpecs.add_product.env.spore.errors).length).toBe(0);
        expect(Object.keys(this.client.methodsSpecs.add_product.env.spore.headers).length).toBe(0);
        expect(this.client.methodsSpecs.add_product.env.spore.formats).toBe(void 8);
        return expect(this.client.methodsSpecs.add_product.env.spore.scheme).toBe("http");
      });
      it('check client methods specs get products', function(){
        expect(this.client.methodsSpecs.get_products != null).toBe(true);
        expect(this.client.methodsSpecs.get_products.path).toBe("/products");
        expect(this.client.methodsSpecs.get_products.required_params.length).toBe(0);
        expect(this.client.methodsSpecs.get_products.optional_params.length).toBe(3);
        expect(this.client.methodsSpecs.get_products.required_payload).toBe(void 8);
        expect(this.client.methodsSpecs.get_products.method).toBe("GET");
        expect(this.client.methodsSpecs.get_products.authentication).toBe(true);
        expect(this.client.methodsSpecs.get_products.documentation).toBe("Get products");
        expect(this.client.methodsSpecs.get_products.env.REQUEST_METHOD).toBe("GET");
        expect(this.client.methodsSpecs.get_products.env.SERVER_NAME).toBe("localhost");
        expect(this.client.methodsSpecs.get_products.env.SERVER_PORT).toBe(3000);
        expect(this.client.methodsSpecs.get_products.env.SCRIPT_NAME).toBe("/api");
        expect(this.client.methodsSpecs.get_products.env.PATH_INFO).toBe("/products");
        expect(this.client.methodsSpecs.get_products.env.QUERY_STRING).toBe("");
        expect(this.client.methodsSpecs.get_products.env.spore.expected_status).toBe(void 8);
        expect(this.client.methodsSpecs.get_products.env.spore.authentication).toBe(true);
        expect(Object.keys(this.client.methodsSpecs.get_products.env.spore.params).length).toBe(0);
        expect(Object.keys(this.client.methodsSpecs.get_products.env.spore.payload).length).toBe(0);
        expect(Object.keys(this.client.methodsSpecs.get_products.env.spore.errors).length).toBe(0);
        expect(Object.keys(this.client.methodsSpecs.get_products.env.spore.headers).length).toBe(0);
        expect(this.client.methodsSpecs.get_products.env.spore.formats).toBe(void 8);
        return expect(this.client.methodsSpecs.get_products.env.spore.scheme).toBe("http");
      });
      it('check client methods specs get product', function(){
        expect(this.client.methodsSpecs.get_product != null).toBe(true);
        expect(this.client.methodsSpecs.get_product.path).toBe("/products/:id");
        expect(this.client.methodsSpecs.get_product.required_params.length).toBe(1);
        expect(this.client.methodsSpecs.get_product.optional_params.length).toBe(0);
        expect(this.client.methodsSpecs.get_product.required_payload).toBe(void 8);
        expect(this.client.methodsSpecs.get_product.method).toBe("GET");
        expect(this.client.methodsSpecs.get_product.authentication).toBe(true);
        expect(this.client.methodsSpecs.get_product.documentation).toBe("Get one product");
        expect(this.client.methodsSpecs.get_product.env.REQUEST_METHOD).toBe("GET");
        expect(this.client.methodsSpecs.get_product.env.SERVER_NAME).toBe("localhost");
        expect(this.client.methodsSpecs.get_product.env.SERVER_PORT).toBe(3000);
        expect(this.client.methodsSpecs.get_product.env.SCRIPT_NAME).toBe("/api");
        expect(this.client.methodsSpecs.get_product.env.PATH_INFO).toBe("/products/:id");
        expect(this.client.methodsSpecs.get_product.env.QUERY_STRING).toBe("");
        expect(this.client.methodsSpecs.get_product.env.spore.expected_status).toBe(void 8);
        expect(this.client.methodsSpecs.get_product.env.spore.authentication).toBe(true);
        expect(Object.keys(this.client.methodsSpecs.get_product.env.spore.params).length).toBe(0);
        expect(Object.keys(this.client.methodsSpecs.get_product.env.spore.payload).length).toBe(0);
        expect(Object.keys(this.client.methodsSpecs.get_product.env.spore.errors).length).toBe(0);
        expect(Object.keys(this.client.methodsSpecs.get_product.env.spore.headers).length).toBe(0);
        expect(this.client.methodsSpecs.get_product.env.spore.formats).toBe(void 8);
        return expect(this.client.methodsSpecs.get_product.env.spore.scheme).toBe("http");
      });
      it('check client methods specs delete product', function(){
        expect(this.client.methodsSpecs.delete_product != null).toBe(true);
        expect(this.client.methodsSpecs.delete_product.path).toBe("/products/:id");
        expect(this.client.methodsSpecs.delete_product.required_params.length).toBe(1);
        expect(this.client.methodsSpecs.delete_product.optional_params.length).toBe(0);
        expect(this.client.methodsSpecs.delete_product.required_payload).toBe(void 8);
        expect(this.client.methodsSpecs.delete_product.method).toBe("DELETE");
        expect(this.client.methodsSpecs.delete_product.authentication).toBe(true);
        expect(this.client.methodsSpecs.delete_product.documentation).toBe("delete one product");
        expect(this.client.methodsSpecs.delete_product.env.REQUEST_METHOD).toBe("DELETE");
        expect(this.client.methodsSpecs.delete_product.env.SERVER_NAME).toBe("localhost");
        expect(this.client.methodsSpecs.delete_product.env.SERVER_PORT).toBe(3000);
        expect(this.client.methodsSpecs.delete_product.env.SCRIPT_NAME).toBe("/api");
        expect(this.client.methodsSpecs.delete_product.env.PATH_INFO).toBe("/products/:id");
        expect(this.client.methodsSpecs.delete_product.env.QUERY_STRING).toBe("");
        expect(this.client.methodsSpecs.delete_product.env.spore.expected_status).toBe(void 8);
        expect(this.client.methodsSpecs.delete_product.env.spore.authentication).toBe(true);
        expect(Object.keys(this.client.methodsSpecs.delete_product.env.spore.params).length).toBe(0);
        expect(Object.keys(this.client.methodsSpecs.delete_product.env.spore.payload).length).toBe(0);
        expect(Object.keys(this.client.methodsSpecs.delete_product.env.spore.errors).length).toBe(0);
        expect(Object.keys(this.client.methodsSpecs.delete_product.env.spore.headers).length).toBe(0);
        expect(this.client.methodsSpecs.delete_product.env.spore.formats).toBe(void 8);
        return expect(this.client.methodsSpecs.delete_product.env.spore.scheme).toBe("http");
      });
      describe('No token', function(x){
        beforeAll(function(done){
          var this$ = this;
          return this.client.methods.add_product({
            payload: {
              name: "voiture",
              sku: "206",
              price: 10000
            }
          }, function(response){
            this$.routePost = response;
            return done();
          }, function(error){});
        });
        return it('No token add product', function(){
          return expect(this.routePost.error).toEqual("No credentials sent!");
        });
      });
      describe('Wrong token', function(x){
        beforeAll(function(done){
          var this$ = this;
          this.client.enable(SporeMiddlewareAuthApiKey, {
            key_name: "Authorization",
            key_value: "Token WRONG"
          });
          return this.client.methods.add_product({
            payload: {
              name: "voiture",
              sku: "206",
              price: 10000
            }
          }, function(response){
            this$.routePost = response;
            return done();
          }, function(error){});
        });
        return it('No token add product', function(){
          return expect(this.routePost.error).toEqual("Wrong token");
        });
      });
      it('enable middleware', function(){
        this.client.enable(SporeMiddlewareAuthApiKey, {
          key_name: "Authorization",
          key_value: "Token S3CR3T"
        });
        expect(this.client.middlewares[1].middlewareClass.name).toBe("SporeMiddlewareAuthApiKey");
        expect(this.client.middlewares[1].params.key_name).toBe("Authorization");
        return expect(this.client.middlewares[1].params.key_value).toBe("Token S3CR3T");
      });
      return describe('Test add product', function(x){
        beforeAll(function(done){
          var this$ = this;
          return this.client.methods.add_product({
            payload: {
              name: "voiture",
              sku: "206",
              price: 10000
            }
          }, function(response){
            this$.routePost = response;
            return done();
          }, function(error){});
        });
        it('add product', function(){
          expect(this.routePost.name).toEqual("voiture");
          expect(this.routePost.sku).toEqual("206");
          return expect(this.routePost.price).toEqual(10000);
        });
        describe('Test get products', function(x){
          beforeAll(function(done){
            var this$ = this;
            return this.client.methods.get_products({
              name: "voiture"
            }, function(response){
              this$.routeGetList = response;
              return done();
            }, function(error){});
          });
          return it('get products', function(){
            expect(this.routeGetList.length).toBeGreaterThan(0);
            expect(this.routeGetList[0].name).toEqual("voiture");
            expect(this.routeGetList[0].sku).toEqual("206");
            return expect(this.routeGetList[0].price).toEqual(10000);
          });
        });
        describe('Test get one product', function(x){
          beforeAll(function(done){
            var this$ = this;
            return this.client.methods.get_product({
              id: this.routePost._id
            }, function(response){
              this$.routeGetOne = response;
              return done();
            }, function(error){});
          });
          return it('get one product', function(){
            expect(this.routeGetOne.name).toEqual("voiture");
            expect(this.routeGetOne.sku).toEqual("206");
            return expect(this.routeGetOne.price).toEqual(10000);
          });
        });
        return describe('Test delete product', function(x){
          beforeAll(function(done){
            var this$ = this;
            return this.client.methods.delete_product({
              id: this.routePost._id
            }, function(response){
              this$.routeDeleteOne = response;
              return done();
            }, function(error){});
          });
          return it('delete one product', function(){
            return expect(this.routeDeleteOne).toEqual("");
          });
        });
      });
    });
  });
}).call(this);
