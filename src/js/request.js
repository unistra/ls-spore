// Generated by LiveScript 1.3.1
(function(){
  var SporeRequest, out$ = typeof exports != 'undefined' && exports || this;
  SporeRequest = (function(){
    SporeRequest.displayName = 'SporeRequest';
    var prototype = SporeRequest.prototype, constructor = SporeRequest;
    function SporeRequest(finalEnv){
      this.env = clone$(finalEnv);
    }
    prototype.call = function(callback){
      var urlTemplate, url, query;
      urlTemplate = this._generateUrlTemplate();
      url = this._generateFinalUrl(urlTemplate);
      return query = this._doRequest(url, callback);
    };
    prototype._generateUrlTemplate = function(){
      var urlTemplate;
      urlTemplate = this.env.spore.scheme + "://" + this.env.SERVER_NAME;
      if (this.env.SERVER_PORT !== 443 && this.env.SERVER_PORT !== 80) {
        urlTemplate += ":" + this.env.SERVER_PORT.toString();
      }
      urlTemplate += this.env.SCRIPT_NAME + this.env.PATH_INFO;
      return urlTemplate;
    };
    prototype._generateFinalUrl = function(urlTemplate){
      var queryString, k, ref$, v, re, finalUrl;
      queryString = "";
      for (k in ref$ = this.env.spore.params) {
        v = ref$[k];
        re = new RegExp(":(" + k + ")");
        if (urlTemplate.search(re) >= 0) {
          urlTemplate = urlTemplate.replace(re, v);
        } else {
          if (queryString !== "") {
            queryString += "&";
          }
          queryString += k + "=" + v;
        }
      }
      if (queryString !== "") {
        this.env.QUERY_STRING = "?" + queryString;
      }
      finalUrl = urlTemplate + this.env.QUERY_STRING;
      return finalUrl;
    };
    prototype._doRequest = function(url, callback){
      var xhr, k, ref$, v, this$ = this;
      xhr = new XMLHttpRequest;
      xhr.open(this.env.REQUEST_METHOD, url, true);
      xhr.setRequestHeader("Content-Type", 'application/json');
      for (k in ref$ = this.env.spore.headers) {
        v = ref$[k];
        xhr.setRequestHeader(k, v);
      }
      if (in$('overrideMimeType', xhr)) {
        xhr.overrideMimeType('application/json');
      }
      xhr.onreadystatechange = function(){
        var ref$, myJson, e;
        if (xhr.readyState === 4) {
          if ((ref$ = xhr.status) === 200 || ref$ === 201 || ref$ === 202 || ref$ === 203 || ref$ === 204 || ref$ === 205 || ref$ === 206 || ref$ === 0) {
            try {
              myJson = xhr.responseText !== "" ? JSON.parse(xhr.responseText) : "";
              callback(myJson);
            } catch (e$) {
              e = e$;
              window.console.error("Spore error: cannot parse json method response");
            }
          } else {
            window.console.error("Spore error: Call " + url);
          }
        }
      };
      if (Object.keys(this.env.spore.payload).length > 0) {
        xhr.send(JSON.stringify(this.env.spore.payload));
      } else {
        xhr.send(null);
      }
      return xhr;
    };
    return SporeRequest;
  }());
  out$.SporeRequest = SporeRequest;
  function clone$(it){
    function fun(){} fun.prototype = it;
    return new fun;
  }
  function in$(x, xs){
    var i = -1, l = xs.length >>> 0;
    while (++i < l) if (x === xs[i]) return true;
    return false;
  }
}).call(this);
