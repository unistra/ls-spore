// Generated by LiveScript 1.3.1
(function(){
  var SporeMethodsFactory, Spore, out$ = typeof exports != 'undefined' && exports || this;
  SporeMethodsFactory = (function(){
    SporeMethodsFactory.displayName = 'SporeMethodsFactory';
    var prototype = SporeMethodsFactory.prototype, constructor = SporeMethodsFactory;
    prototype.createMethod = function(name, desc, env, middlewares){
      var method;
      method = function(params, success, error){
        var popPayload, checkRequireParams, checkWrongParams, applyMiddlewares, addParams, addPayload, addHeaders, payload, request;
        popPayload = function(){
          var payload;
          payload = params.payload != null
            ? params.payload
            : {};
          delete params.payload;
          if (desc.required_payload != null && desc.required_payload === true && Object.keys(payload).length === 0) {
            window.console.error("Spore error: payload is required");
          }
          return payload;
        };
        checkRequireParams = function(){
          var checkRequiredParams, res$, i$, ref$, len$, k;
          res$ = [];
          for (i$ = 0, len$ = (ref$ = desc.requiredParams).length; i$ < len$; ++i$) {
            k = ref$[i$];
            res$.push(k);
          }
          checkRequiredParams = res$;
          for (i$ = 0, len$ = (ref$ = desc.requiredParams).length; i$ < len$; ++i$) {
            k = ref$[i$];
            if (params[k] != null) {
              checkRequiredParams.pop(k);
            }
          }
          return checkRequiredParams.length === 0;
        };
        checkWrongParams = function(){
          var check, k, ref$, v;
          check = true;
          for (k in ref$ = params) {
            v = ref$[k];
            if (desc.requiredParams.indexOf(k) > -1 || desc.optionalParams.indexOf(k) > -1) {
              continue;
            } else {
              check = false;
            }
          }
          return check;
        };
        applyMiddlewares = function(){
          var i$, ref$, len$, m, middlewareInstance, results$ = [];
          env.spore.headers = {};
          for (i$ = 0, len$ = (ref$ = middlewares).length; i$ < len$; ++i$) {
            m = ref$[i$];
            if (m.predicate(env)) {
              middlewareInstance = new m['middlewareClass'](m['params']);
              results$.push(middlewareInstance.call(env));
            }
          }
          return results$;
        };
        addParams = function(){
          return env.spore.params = params;
        };
        addPayload = function(payload){
          return env.spore.payload = payload;
        };
        addHeaders = function(){
          var k, ref$, v, results$ = [];
          for (k in ref$ = desc.headers) {
            v = ref$[k];
            if (not$(env.spore.headers[k] != null)) {
              results$.push(env.spore.headers[k] = v);
            }
          }
          return results$;
        };
        payload = popPayload();
        if (checkRequireParams && checkWrongParams) {
          addParams();
          addPayload(payload);
          addHeaders();
          applyMiddlewares();
          request = new SporeRequest(env);
          return request.call(success, error);
        } else {
          return window.console.error("Spore error: wrong parameters of " + name);
        }
      };
      return method;
    };
    function SporeMethodsFactory(){}
    return SporeMethodsFactory;
  }());
  Spore = (function(){
    Spore.displayName = 'Spore';
    var prototype = Spore.prototype, constructor = Spore;
    function Spore(url, success, error, base_url){
      base_url == null && (base_url = void 8);
      this.url = url;
      this.baseUrl = base_url;
      this.isReady = false;
      this.description = {};
      this.create(success, error);
      this.methods = {};
      this.methodsEnv = {};
      this.middlewares = [];
    }
    prototype.create = function(success, error){
      var xhr, this$ = this;
      xhr = new XMLHttpRequest;
      xhr.open('GET', this.url, true);
      if (in$('overrideMimeType', xhr)) {
        xhr.overrideMimeType('application/json');
      }
      xhr.onreadystatechange = function(){
        var ref$, myJson, e, errorMsg;
        if (xhr.readyState === 4) {
          if (200 <= (ref$ = xhr.status) && ref$ <= 299) {
            try {
              myJson = JSON.parse(xhr.responseText);
              this$._callCallback(myJson, success);
            } catch (e$) {
              e = e$;
              errorMsg = "Spore error: cannot parse json description file";
              window.console.error(errorMsg);
              error({
                error: errorMsg
              });
            }
          } else {
            errorMsg = "Spore error: " + xhr.status + " " + xhr.statusText;
            window.console.error(errorMsg);
            error({
              error: errorMsg
            });
          }
        }
      };
      xhr.send(null);
      return xhr;
    };
    prototype.enable = function(middlewareClass, params){
      return this.enableIf(function(request){
        return true;
      }, middlewareClass, params);
    };
    prototype.enableIf = function(predicate, middlewareClass, params){
      return this.middlewares.push({
        predicate: predicate,
        middlewareClass: middlewareClass,
        params: params
      });
    };
    prototype.logBasicInfos = function(){
      window.console.log("Name: " + this.description.name);
      window.console.log("Base url: " + this.description.base_url);
      window.console.log("Authority: " + this.description.authority);
      window.console.log("Formats: " + this.description.formats);
      window.console.log("Version: " + this.description.version);
      return window.console.log("Meta: " + JSON.stringify(this.description.meta));
    };
    prototype._generateMethods = function(methods){
      var myFactory, key, value, results$ = [];
      myFactory = new SporeMethodsFactory();
      for (key in methods) {
        value = methods[key];
        this._generateMethodsEnv(key, value);
        results$.push(this['methods'][key] = myFactory.createMethod(key, this.description.methods[key], this.methodsEnv[key], this.middlewares));
      }
      return results$;
    };
    prototype._generateMethodsEnv = function(methodKey, methodValue){
      var url_parser;
      url_parser = document.createElement('a');
      url_parser.href = this._getBaseUrl(methodValue);
      this.methodsEnv[methodKey] = {};
      this.methodsEnv[methodKey].REQUEST_METHOD = this._getRequestMethod(methodValue.method);
      this.methodsEnv[methodKey].SERVER_NAME = url_parser.hostname;
      this.methodsEnv[methodKey].SERVER_PORT = this._getServerPort(url_parser);
      this.methodsEnv[methodKey].SCRIPT_NAME = this._getScriptName(url_parser.pathname);
      this.methodsEnv[methodKey].PATH_INFO = this._getPathInfo(this.methodsEnv[methodKey].SCRIPT_NAME, url_parser.pathname, methodValue.path);
      this.methodsEnv[methodKey].QUERY_STRING = "";
      this.methodsEnv[methodKey].spore = {};
      this.methodsEnv[methodKey].spore.expected_status = methodValue.expected_status != null
        ? methodValue.expected_status
        : [];
      this.methodsEnv[methodKey].spore.authentication = this._getAuthentication(methodValue.authentication);
      this.methodsEnv[methodKey].spore.params = {};
      this.methodsEnv[methodKey].spore.payload = {};
      this.methodsEnv[methodKey].spore.errors = {};
      this.methodsEnv[methodKey].spore.headers = {};
      this.methodsEnv[methodKey].spore.formats = methodValue.formats;
      return this.methodsEnv[methodKey].spore.scheme = url_parser.protocol.split(":")[0];
    };
    prototype._getAuthentication = function(methodAuthentication){
      if (methodAuthentication != null) {
        return methodAuthentication;
      } else if (this.description.authentication != null) {
        return this.description.authentication;
      } else {
        return false;
      }
    };
    prototype._getPathInfo = function(script_name, pathname, method_path){
      var res;
      res = "";
      if (script_name != null && script_name !== "") {
        res = pathname.replace(script_name, "");
      } else {
        res = pathname;
      }
      if (res === "/") {
        res = "";
      }
      res += method_path;
      return res;
    };
    prototype._getRequestMethod = function(method){
      if (method != null && method !== "") {
        return method;
      } else {
        return "GET";
      }
    };
    prototype._getScriptName = function(pathname){
      var slice;
      if (pathname != null && pathname !== "") {
        slice = pathname.split("/", 2).slice(1);
        if (slice[0] != null && slice[0] !== "") {
          return "/" + slice[0];
        } else {
          return "";
        }
      }
    };
    prototype._getServerPort = function(url_parser){
      var port;
      port = 80;
      if (url_parser.port != null && url_parser.port !== "") {
        port = parseInt(url_parser.port);
      } else if (url_parser.protocol === "https:") {
        port = 443;
      }
      return port;
    };
    prototype._callCallback = function(response, callback){
      this.description = response;
      this._generateMethods(this.description.methods);
      this.isReady = true;
      return callback();
    };
    prototype._getBaseUrl = function(value){
      if (this.baseUrl != null) {
        return this.baseUrl;
      } else if (value.base_url != null) {
        return value.base_url;
      } else if (this.description.base_url != null) {
        return this.description.base_url;
      } else {}
    };
    return Spore;
  }());
  out$.Spore = Spore;
  function not$(x){ return !x; }
  function in$(x, xs){
    var i = -1, l = xs.length >>> 0;
    while (++i < l) if (x === xs[i]) return true;
    return false;
  }
}).call(this);
